package com.kurvlrgui.gui;

import com.kurvlrgui.runner.KRunner;
import com.kurvlrgui.util.KurvlrResult;
import com.kurvlrgui.util.NumericData;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class FormMain extends javax.swing.JFrame implements ComponentListener {

    /*
     0 - SIS
     1 - RDF
     2 - SIS diff
     3 - RDF diff
     */
    public int graphToShow = 0;
    private boolean dataReady = false;
    public String modelFileName = null;

    private ChartPanel currentChartPanel = null;
    
    private KurvlrResult current = null;

    /**
     * Creates new form FormMain
     */
    public FormMain() {
        initComponents();
        this.setTitle("kurvlrGUI");
        this.setLocationRelativeTo(null);
        this.chemGraphPanel.addComponentListener(this);
        this.jPanel1.setBackground(Color.WHITE);
        this.chemGraphPanel.setBackground(Color.WHITE);
        this.getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        chemLoadButton = new javax.swing.JButton();
        chemModelName = new javax.swing.JLabel();
        chemRunButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chemModelText = new javax.swing.JTextArea();
        chemSwitchLineWrap = new javax.swing.JButton();
        chemSaveModel = new javax.swing.JButton();
        chemDeleteTempFiles = new javax.swing.JCheckBox();
        chemAboutButton = new javax.swing.JLabel();
        rdfShow = new javax.swing.JButton();
        sisShow = new javax.swing.JButton();
        rdfDiffShow = new javax.swing.JButton();
        chemGraphPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chemLoadButton.setText("Load model");
        chemLoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chemLoadButtonMouseClicked(evt);
            }
        });

        chemModelName.setText("...");

        chemRunButton.setText("Run");
        chemRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chemRunButtonMouseClicked(evt);
            }
        });

        chemModelText.setColumns(20);
        chemModelText.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        chemModelText.setRows(5);
        chemModelText.setAutoscrolls(false);
        jScrollPane1.setViewportView(chemModelText);

        chemSwitchLineWrap.setText("Switch line wrap");
        chemSwitchLineWrap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chemSwitchLineWrapMouseClicked(evt);
            }
        });

        chemSaveModel.setText("Save model");
        chemSaveModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chemSaveModelMouseClicked(evt);
            }
        });

        chemDeleteTempFiles.setText("Delete temporary files");

        chemAboutButton.setForeground(new java.awt.Color(0, 0, 255));
        chemAboutButton.setText("About");
        chemAboutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chemAboutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chemAboutButtonMouseClicked(evt);
            }
        });

        rdfShow.setText("RDF");
        rdfShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfShowActionPerformed(evt);
            }
        });

        sisShow.setText("SIS");
        sisShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sisShowActionPerformed(evt);
            }
        });

        rdfDiffShow.setText("RDF DIFF");
        rdfDiffShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfDiffShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chemSwitchLineWrap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chemRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chemAboutButton)
                            .addComponent(chemDeleteTempFiles))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 301, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sisShow, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rdfDiffShow, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chemLoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chemSaveModel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chemModelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdfShow))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chemLoadButton)
                    .addComponent(chemSaveModel)
                    .addComponent(chemModelName)
                    .addComponent(rdfShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chemRunButton)
                    .addComponent(chemDeleteTempFiles)
                    .addComponent(sisShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chemSwitchLineWrap)
                    .addComponent(chemAboutButton)
                    .addComponent(rdfDiffShow))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout chemGraphPanelLayout = new javax.swing.GroupLayout(chemGraphPanel);
        chemGraphPanel.setLayout(chemGraphPanelLayout);
        chemGraphPanelLayout.setHorizontalGroup(
            chemGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 684, Short.MAX_VALUE)
        );
        chemGraphPanelLayout.setVerticalGroup(
            chemGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 626, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(chemGraphPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chemSwitchLineWrapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chemSwitchLineWrapMouseClicked
        this.chemModelText.setLineWrap(!this.chemModelText.getLineWrap());
    }//GEN-LAST:event_chemSwitchLineWrapMouseClicked

    private void chemLoadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chemLoadButtonMouseClicked
        FileDialog fd = new FileDialog((JFrame) null, "Select input file", FileDialog.LOAD);
        fd.setVisible(true);

        File f[] = fd.getFiles();
        if (f.length == 1) {
            File df = f[0];
            String path = df.getAbsolutePath();
            this.modelFileName = path;
            this.chemModelName.setText(df.getName());

            String fileContents = "";
            CharBuffer cb = CharBuffer.allocate(1024 * 1024);
            int bytesRead = 0;

            try {
                FileReader fr = new FileReader(this.modelFileName);

                int read = 0;
                char buffer[] = new char[8192];

                while ((read = fr.read(buffer, 0, 8192)) != -1) {
                    cb.put(buffer, 0, read);
                    bytesRead += read;
                }

                fr.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
            }

            char cba[] = cb.array();
            byte bba[] = new byte[cba.length];

            for (int i = 0; i < cba.length; ++i) {
                bba[i] = (byte) cba[i];
            }

            try {
                fileContents = new String(bba, 0, bytesRead, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.chemModelText.setText(fileContents);
            this.executeRunner();
        }
    }//GEN-LAST:event_chemLoadButtonMouseClicked

    private void chemRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chemRunButtonMouseClicked
        this.executeRunner();
    }//GEN-LAST:event_chemRunButtonMouseClicked

    private void executeRunner() {
        this.chemLoadButton.setEnabled(false);
        this.chemRunButton.setEnabled(false);
        this.chemSaveModel.setEnabled(false);
        this.chemSwitchLineWrap.setEnabled(false);

        if (this.currentChartPanel != null) {
            this.currentChartPanel.clear();
            this.chemGraphPanel.remove(this.currentChartPanel);
            this.chemGraphPanel.updateUI();
            this.dataReady = false;
        }

        java.awt.EventQueue.invokeLater(() -> {
            KRunner krunner = new KRunner(this, this.chemModelText.getText(), true, this.chemDeleteTempFiles.isSelected());
            krunner.execute();
        });
    }

    private void chemSaveModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chemSaveModelMouseClicked
        FileDialog fd = new FileDialog((JFrame) null, "Select output file", FileDialog.SAVE);
        fd.setVisible(true);

        File f = fd.getFiles()[0];

        FileWriter fw;
        try {
            fw = new FileWriter(f.getAbsolutePath());
            fw.write(this.chemModelText.getText());
            fw.close();
        } catch (IOException ex) {

        }
    }//GEN-LAST:event_chemSaveModelMouseClicked

    private void chemAboutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chemAboutButtonMouseClicked
        (new FormAbout()).setVisible(true);
    }//GEN-LAST:event_chemAboutButtonMouseClicked

    private void rdfShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfShowActionPerformed
        this.graphToShow = 1;
        this.showGraph();
    }//GEN-LAST:event_rdfShowActionPerformed

    private void sisShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sisShowActionPerformed
        this.graphToShow = 0;
        this.showGraph();
    }//GEN-LAST:event_sisShowActionPerformed

    private void rdfDiffShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfDiffShowActionPerformed
        this.graphToShow = 3;
        this.showGraph();
    }//GEN-LAST:event_rdfDiffShowActionPerformed

    public void runnerFailure(String msg) {
        this.chemLoadButton.setEnabled(true);
        this.chemRunButton.setEnabled(true);
        this.chemSaveModel.setEnabled(true);
        this.chemSwitchLineWrap.setEnabled(true);

        JOptionPane.showMessageDialog(null, msg, "Error!", JOptionPane.ERROR_MESSAGE);
    }

    public void showGraph() {
        Dimension size;
        ChartPanel chart;

        if(this.dataReady) {
            if(this.currentChartPanel != null) {
                this.currentChartPanel.clear();
                this.chemGraphPanel.remove(this.currentChartPanel);
            }

            switch(this.graphToShow) {
                case 0:
                    chart = new ChartPanel("SIS", this.current.getSISCalculated(), this.current.getSISObserved());
                    size = this.chemGraphPanel.getSize();
                    chart.setLocation(0, 0);
                    chart.setSize(size);
                    this.chemGraphPanel.add(chart);
                    chart.setVisible(true);
                    chart.resizeChart();
                    this.currentChartPanel = chart;
                break;
                case 1:
                    chart = new ChartPanel("RDF", this.current.getRDFCalculated(), this.current.getRDFObserved());
                    size = this.chemGraphPanel.getSize();
                    chart.setLocation(0, 0);
                    chart.setSize(size);
                    this.chemGraphPanel.add(chart);
                    chart.setVisible(true);
                    chart.resizeChart();
                    this.currentChartPanel = chart;
                break;
                case 3:
                    chart = new ChartPanel("RDF DIFF", this.current.getRDFDiff(), null);
                    size = this.chemGraphPanel.getSize();
                    chart.setLocation(0, 0);
                    chart.setSize(size);
                    this.chemGraphPanel.add(chart);
                    chart.setVisible(true);
                    chart.resizeChart();
                    this.currentChartPanel = chart;
                break;
            }
        }
    }

    //public void runnerSuccess(NumericData sis_calc, NumericData sis_obs, NumericData rdf_calc, NumericData rdf_obs, NumericData rdf_diff) {
    public void runnerSuccess(KurvlrResult newResult) {
        this.chemLoadButton.setEnabled(true);
        this.chemRunButton.setEnabled(true);
        this.chemSaveModel.setEnabled(true);
        this.chemSwitchLineWrap.setEnabled(true);

        this.dataReady = true;

        if (this.current != null) {
            
        }
        
        this.current = newResult;
        
        this.showGraph();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chemAboutButton;
    private javax.swing.JCheckBox chemDeleteTempFiles;
    private javax.swing.JPanel chemGraphPanel;
    private javax.swing.JButton chemLoadButton;
    private javax.swing.JLabel chemModelName;
    private javax.swing.JTextArea chemModelText;
    private javax.swing.JButton chemRunButton;
    private javax.swing.JButton chemSaveModel;
    private javax.swing.JButton chemSwitchLineWrap;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton rdfDiffShow;
    private javax.swing.JButton rdfShow;
    private javax.swing.JButton sisShow;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentResized(ComponentEvent e) {
        if (this.dataReady) {
            Dimension size = this.chemGraphPanel.getSize();

            this.currentChartPanel.setSize(size);
            this.currentChartPanel.setLocation(0, 0);

            this.currentChartPanel.resizeChart();
        }
    }

    @Override
    public void componentMoved(ComponentEvent e) {

    }

    @Override
    public void componentShown(ComponentEvent e) {

    }

    @Override
    public void componentHidden(ComponentEvent e) {

    }
}
